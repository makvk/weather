from aiogram import Router, types, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import Command
from weather_api import WeatherAPI
from aiogram.fsm.context import FSMContext

router = Router()
weather_api = WeatherAPI()

def get_inline_kb():
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard = [
            [
                types.InlineKeyboardButton(text = "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –¥–µ–Ω—å", callback_data = "forecast_weather:")
            ]
        ],
        resize_keyboard = True,
        one_time_keyboard = True
    )
    return keyboard

@router.callback_query(F.data == "forecast_weather:")
async def get_forecast_weather(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        forecast_hours = (await state.get_data())['forecast']['forecastday'][0]['hour'][:24]
        await state.clear()
        weather_text = f"–ü–æ–≥–æ–¥–∞ –Ω–∞ 24 —á–∞—Å–∞ \n"
        for hour in forecast_hours:
            time = hour['time'].split()[1][:5] 
            weather_text += (
                f"\nüïí <b>{time}</b>: "
                f"{hour['temp_c']}¬∞C, {hour['condition']['text']}, "
                f"üåß {hour['chance_of_rain']}%"
            )
        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.message.answer(
            weather_text,
            parse_mode="HTML"
        )
    except:
        await callback_query.message.edit_reply_markup(reply_markup=None)

@router.message(Command("weather"))
async def cmd_weather(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    city = message.text.split(maxsplit=1)
    if len(city) > 1:
        city = city[1]
        await process_weather_request(message, state, city)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/weather –ú–æ—Å–∫–≤–∞")

async def process_weather_request(message: types.Message, state: FSMContext, city: str):
    try:
        weather_data = await weather_api.get_current_weather_city(city)

        if not weather_data:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return
        
        location = weather_data['location']
        current = weather_data['current']

        weather_text = (
            f"üå¶ <b>–ü–æ–≥–æ–¥–∞ –≤ {location['name']} ({location['country']})</b>\n"
            f"üìç <i>{location['localtime']}</i>\n\n"
            f"<b>–°–µ–π—á–∞—Å:</b>\n"
            f"üå°Ô∏è {current['condition']['text']} {current['temp_c']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current['feelslike_c']}¬∞C)\n"
            f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {current['wind_kph']} –∫–º/—á ({current['wind_dir']})\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\n"
            f"üåß –û—Å–∞–¥–∫–∏: {current['precip_mm']} –º–º\n\n"
        )

        await message.answer(
            weather_text,
            parse_mode="HTML",
            reply_markup = get_inline_kb()
        )
        await state.clear()
        await state.update_data(**weather_data)
    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        )
        raise

# –ü–æ–≥–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
@router.message(F.text == "üî¥ –û—Ç–º–µ–Ω–∞")
async def cancellation(message: types.Message):
    await message.answer(
        f"–õ–∞–¥–Ω–æ",
        reply_markup = ReplyKeyboardRemove()
    )

@router.message(lambda message: message.location is not None)
async def handle_location(message: types.Message, state: FSMContext):
    try:
        lat = message.location.latitude
        lon = message.location.longitude
        await message.answer(
            f"–≤–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n\n"
            f"–§–æ—Ä–º–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...",
            reply_markup = ReplyKeyboardRemove()
        )

        weather_data = await weather_api.get_current_weather_location([lat, lon])

        if not weather_data:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return

        location = weather_data['location']
        current = weather_data['current']

        weather_text = (
            f"üå¶ <b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º {location['lat']} {location['lon']}</b>\n"
            f"üìç <i>{location['localtime']}</i>\n\n"
            f"<b>–°–µ–π—á–∞—Å:</b>\n"
            f"üå°Ô∏è {current['condition']['text']} {current['temp_c']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current['feelslike_c']}¬∞C)\n"
            f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {current['wind_kph']} –∫–º/—á ({current['wind_dir']})\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\n"
            f"üåß –û—Å–∞–¥–∫–∏: {current['precip_mm']} –º–º\n\n"
        )

        await message.answer(
            weather_text,
            parse_mode="HTML",
            reply_markup = get_inline_kb()
        )
        await state.clear()
        await state.update_data(**weather_data)
    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        )

@router.message(Command("geo"))
async def request_location(message: types.Message): 

    location_keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [
                KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True),
                KeyboardButton(text="üî¥ –û—Ç–º–µ–Ω–∞")
            ]
        ],
        resize_keyboard = True,
        one_time_keyboard = True
    )

    await message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
        reply_markup = location_keyboard
    )


