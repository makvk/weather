# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë           –°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê            ‚ïë
# ‚ïë                   /subscribe                   ‚ïë
# ‚ïë                 –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê                 ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

from aiogram import types, Router, Bot
from aiogram.filters import Command 
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.exceptions import TelegramBadRequest
from old_weather_api import WeatherAPI
from DataBases.work_with_tables import add_to_table, get_all_subscribers, remove_subscriber
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
scheduler = AsyncIOScheduler()
weather_api = WeatherAPI()

@router.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    city = message.text.split(maxsplit=2)
    if len(city) > 2:
        city, timerq = city[1], city[2]
        if not (0 <= int(timerq.split(":")[0]) <= 24) or not (0 <= int(timerq.split(":")[1]) <= 60):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
            return
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
        await add_to_table(user_id, city, timerq)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/subscribe –ú–æ—Å–∫–≤–∞ 8:00")

@router.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: types.Message):
    user_id = message.from_user.id
    await remove_subscriber(user_id)
    await message.answer(
        "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
    )

async def send_weather_update(bot: Bot, user_id, city):
    try:
        print("—É—Å–ø–µ—Ö")
        weather_data = await weather_api.get_forecast_weather_city(city)

        if not weather_data:
            await bot.send_message(
                user_id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"
            )
        location = weather_data['location']
        current = weather_data['current']
        forecast_hours = weather_data['forecast']['forecastday'][0]['hour'][:24]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞

        weather_text = (
            f"üå¶ <b>–ü–æ–≥–æ–¥–∞ –≤ {location['name']} ({location['country']})</b>\n"
            f"üìç <i>{location['localtime']}</i>\n\n"
            f"<b>–°–µ–π—á–∞—Å:</b>\n"
            f"‚Ä¢ {current['condition']['text']} {current['temp_c']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current['feelslike_c']}¬∞C)\n"
            f"‚Ä¢ –í–µ—Ç–µ—Ä: {current['wind_kph']} –∫–º/—á ({current['wind_dir']})\n"
            f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\n"
            f"‚Ä¢ –û—Å–∞–¥–∫–∏: {current['precip_mm']} –º–º\n\n"
            f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞:</b>\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
        for hour in forecast_hours:
            time = hour['time'].split()[1][:5] 
            weather_text += (
                f"\nüïí <b>{time}</b>: "
                f"{hour['temp_c']}¬∞C, {hour['condition']['text']}, "
                f"üåß {hour['chance_of_rain']}%"
            )

        await bot.send_message(
            user_id,
            weather_text,
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        await remove_subscriber(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã: {e}")
        bot.send_message(
            user_id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}"
        )

async def check_subscribers(bot: Bot):
    for job in scheduler.get_jobs():
        if job.func == send_weather_update:
            job.remove()

    subscribers = await get_all_subscribers()
    for user in subscribers:
        user_id = user["user_id"]
        city = user["city"]
        send_time = user["send_time"]
        print(user)
        try: 
            hour, minute = map(int, send_time.split(':'))
            scheduler.add_job(
                send_weather_update,
                "cron",
                hour = hour,
                minute = minute,
                args = [bot, user_id, city]
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            raise

async def setup_scheduler(bot: Bot):
    await check_subscribers(bot)

    scheduler.add_job(
        check_subscribers,
        "interval",
        hours = 1,
        args = [bot]
    )

    if not scheduler.running:
        scheduler.start()